//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成 by 明教主加强的代码生成模板( 作者 m8989@qq.com) 。
//     T4模板 + 阿明加强的代码生成模板
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果重新生成代码，这些更改将会丢失。
//      所以如有修改的必要，建议建立 partial 类进行增加自己的代码
//                              或使用 #region 保留  功能说明  和 #endregion 来包围
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Volo.Abp;
using Volo.Abp.Data;
using Volo.Abp.MongoDB;
using MongoDB.Driver;
//using HengDa.LiZongMing.REAMS.Users;

using HengDa.LiZongMing.REAMS;
using HengDa.LiZongMing.REAMS.RNS;
using HengDa.LiZongMing.REAMS.Room;
using HengDa.LiZongMing.REAMS.NBS;
using HengDa.LiZongMing.REAMS.NaI;
using HengDa.LiZongMing.REAMS.HVE;
using HengDa.LiZongMing.REAMS.ZJC;
using HengDa.LiZongMing.REAMS.Devices;
using HengDa.LiZongMing.REAMS.DLL;
using HengDa.LiZongMing.REAMS.Atm;
using HengDa.LiZongMing.REAMS.ZCQ;
using HengDa.LiZongMing.REAMS.Crm;


namespace HengDa.LiZongMing.REAMS.MongoDB
{


    
    public static class REAMSMongoDbContextModelCreatingExtensions
    {
        public static void ConfigureREAMS(this IMongoModelBuilder builder, Action<AbpMongoModelBuilderConfigurationOptions> optionsAction = null)
        {
            Check.NotNull(builder, nameof(builder));
            var options = new AbpMongoModelBuilderConfigurationOptions(
                YunConsts.DbTablePrefix
            );

            optionsAction?.Invoke(options);

            /* Configure your own tables/entities inside here */

            //builder.Entity<YourEntity>(b =>
            //{
            //    b.ToTable(YunConsts.DbTablePrefix + "YourEntities", YunConsts.DbSchema);
            //    b.ConfigureByConvention(); //auto configure for the base class props
            //    //...
            //});


            //扩展配置方法,记得保存自己的修改

            builder.Entity<AtmosphereRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "AtmosphereRecord";
            });

            builder.Entity<Customer>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "Customer";
            });

            builder.Entity<CustomerService>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "CustomerService";
            });

            builder.Entity<Device>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "Device";
            });

            builder.Entity<DeviceRoom>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "DeviceRoom";
            });

            builder.Entity<IotDeviceAlarm>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "IotDeviceAlarm";
            });

            builder.Entity<IotDeviceLog>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "IotDeviceLog";
            });

            builder.Entity<DllRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "DllRecord";
            });

            builder.Entity<DllSetting>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "DllSetting";
            });

            builder.Entity<HveExtRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "HveExtRecord";
            });

            builder.Entity<HveRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "HveRecord";
            });

            builder.Entity<HveRunStatus>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "HveRunStatus";
            });

            builder.Entity<NaiRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "NaiRecord";
            });

            builder.Entity<NbsRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "NbsRecord";
            });

            builder.Entity<NbsRunStatus>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "NbsRunStatus";
            });

            builder.Entity<RnsRunStatus>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "RnsRunStatus";
            });

            builder.Entity<RoomRunStatus>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "RoomRunStatus";
            });

            builder.Entity<ZcqRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "ZcqRecord";
            });

            builder.Entity<ZcqRunStatus>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "ZcqRunStatus";
            });

            builder.Entity<ZjcRainRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "ZjcRainRecord";
            });

            builder.Entity<ZjcRecord>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "ZjcRecord";
            });

            builder.Entity<ZjcRunStatus>(b =>
            {
                b.CollectionName = options.CollectionPrefix + "ZjcRunStatus";
            });

        }
    }
}
