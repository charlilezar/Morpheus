//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成 by 明教主加强的代码生成模板( 作者 m8989@qq.com) 。
//     T4模板 + 阿明加强的代码生成模板
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果重新生成代码，这些更改将会丢失。
//      所以如有修改的必要，建议建立 partial 类进行增加自己的代码
//                              或使用 #region 保留  功能说明  和 #endregion 来包围
// </auto-generated>
//------------------------------------------------------------------------------

using HengDa.LiZongMing.REAMS;
using HengDa.LiZongMing.REAMS.Authorization;
using HengDa.LiZongMing.REAMS.Devices;
using HengDa.LiZongMing.REAMS.Devices.Dtos;

using Microsoft.AspNetCore.Authorization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Domain.Repositories;



namespace HengDa.LiZongMing.REAMS.Devices
{

    /// <summary>
    /// 设备报警记录 EditDto
    /// </summary>

    [Authorize(/*REAMSPermissions.IotDeviceAlarm.Default*/)]
    public partial class IotDeviceAlarmAppService : REAMSAppServiceBase<IotDeviceAlarm, IotDeviceAlarmDto, Guid, IotDeviceAlarmPagedRequest, IotDeviceAlarmDto, IotDeviceAlarmDto>, IIotDeviceAlarmAppService
    {

        #region 构造方法

        //private readonly IotDeviceAlarmManager _iotDeviceAlarmManager;

        public IotDeviceAlarmAppService(
            IIotDeviceAlarmRepository repository  //mongodb必须用这个             IRepository<IotDeviceAlarm, Guid> repository
            //IotDeviceAlarmManager iotDeviceAlarmManager
            ):base(repository)
        {

            //权限控制
            //GetPolicyName = REAMSPermissions.IotDeviceAlarm.Query;
            //GetListPolicyName = REAMSPermissions.IotDeviceAlarm.Query;
            //CreatePolicyName = REAMSPermissions.IotDeviceAlarm.Create;
            //UpdatePolicyName = REAMSPermissions.IotDeviceAlarm.Edit;
            //DeletePolicyName = REAMSPermissions.IotDeviceAlarm.Delete;

        }

        #endregion


        [Authorize(REAMSPermissions.IotDeviceAlarm.Query)]
        public override Task<IotDeviceAlarmDto> GetAsync(Guid id)
        {
            return base.GetAsync(id);
        }
        [Authorize(REAMSPermissions.IotDeviceAlarm.Query)]
        public override Task<PagedResultDto<IotDeviceAlarmDto>> GetListAsync(IotDeviceAlarmPagedRequest input)
        {
            return base.GetListAsync(input);
        }
        /// <summary>
        /// 获取一个现有实体，或者新的默认实体
        /// </summary>
        [Authorize(REAMSPermissions.IotDeviceAlarm.Create)]
        public async Task<IotDeviceAlarmDto> GetOrNew(Nullable<Guid> id)
        {
            IotDeviceAlarmDto editDto = null;

			if (id.HasValue)
			{
				var entity = await Repository.GetAsync(id.Value);
				editDto = MapToGetOutputDto(entity);
			}
			else
			{
				editDto = new IotDeviceAlarmDto();
			}

			return editDto;
        }

        [Authorize(REAMSPermissions.IotDeviceAlarm.Create)]
        public override async Task<IotDeviceAlarmDto> CreateAsync(IotDeviceAlarmDto input)
        {
            //CheckCreatePermission();
            return await base.CreateAsync(input);
            //var iotDeviceAlarm = MapToEntity(input);
            //return MapToGetOutputDto(iotDeviceAlarm);
        }

        [Authorize(REAMSPermissions.IotDeviceAlarm.Edit)]
        public override async Task<IotDeviceAlarmDto> UpdateAsync(Guid id, IotDeviceAlarmDto input)
        {
            //CheckUpdatePermission();
            return await base.UpdateAsync(id,input);

            //var iotDeviceAlarm = await _iotDeviceAlarmManager.GetIotDeviceAlarmByIdAsync(input.Id);
            //MapToEntity(input, iotDeviceAlarm);
            //CheckErrors(await _iotDeviceAlarmManager.UpdateAsync(iotDeviceAlarm));
            //if (input.RoleNames != null)
            //{
            //    CheckErrors(await _iotDeviceAlarmManager.SetRoles(iotDeviceAlarm, input.RoleNames));
            //}
            //return await Get(input);
        }

        [Authorize(REAMSPermissions.IotDeviceAlarm.Delete)]
        public override  Task DeleteAsync(Guid id)
        {
            return base.DeleteAsync(id);
            //var iotDeviceAlarm = await _iotDeviceAlarmManager.GetIotDeviceAlarmByIdAsync(id);
            //await _iotDeviceAlarmManager.DeleteAsync(iotDeviceAlarm);
        }

        protected override async Task<IotDeviceAlarm> GetEntityByIdAsync(Guid id)
        {
            return await base.GetEntityByIdAsync(id);
            //var iotDeviceAlarm = await Repository.GetAllIncluding(x => x.Roles).FirstOrDefaultAsync(x => x.Id == id);
            //if (iotDeviceAlarm == null)
            //{
            //    throw new EntityNotFoundException(typeof(IotDeviceAlarm), id);
            //}
            //return iotDeviceAlarm;
            //return await Repository.GetAsync(id);
        }

        #region   IObjectMapper实体转换方法
        /*
        /// <summary>
        /// 读取单个实体 <see cref="IotDeviceAlarm"/> 时转换为 <see cref="IotDeviceAlarmDto"/>.
        /// It uses <see cref="IObjectMapper"/> by default.
        /// </summary>
        protected virtual IotDeviceAlarmDto MapToGetOutputDto(IotDeviceAlarm entity)
        {
            //return ObjectMapper.Map<IotDeviceAlarm, IotDeviceAlarmDto>(entity);
            //return base.MapToGetOutputDto(entity);
        }

        /// <summary>
        /// 读取列表实体 <see cref="IotDeviceAlarm"/> 时转换为 <see cref="IotDeviceAlarmDto"/>.
        /// It uses <see cref="IObjectMapper"/> by default.
        /// </summary>
        protected virtual PagedResultDto<IotDeviceAlarmDto> MapToGetListOutputDto(TEntity entity)
        {
            //return ObjectMapper.Map<TEntity, TGetListOutputDto>(entity);
            //return base.MapToGetListOutputDto(entity);
        }

        /// <summary>
        /// 新增时将参数转换成实体
        /// </summary>
        protected override IotDeviceAlarm MapToEntity(IotDeviceAlarmDto createInput)
        {
            return base.MapToEntity(createInput);
            //var iotDeviceAlarm = ObjectMapper.Map<IotDeviceAlarm>(createInput);
            //iotDeviceAlarm.SetNormalizedNames();
            //return iotDeviceAlarm;
        }

        /// <summary>
        /// 编辑时将参数转换成实体
        /// </summary>
        protected override void MapToEntity(IotDeviceAlarmDto updateInput, IotDeviceAlarm iotDeviceAlarm)
        {
            base.MapToEntity(updateInput, iotDeviceAlarm);
            //ObjectMapper.Map(updateInput, iotDeviceAlarm);
            //iotDeviceAlarm.SetNormalizedNames();
        }
        */
        #endregion

        #region   不保留  条件过滤
        protected override Task<IQueryable<IotDeviceAlarm>> CreateFilteredQueryAsync(IotDeviceAlarmPagedRequest input)
        {
            var q = Repository
                //.AsNoTracking()
                //.WhereIf(!input.Keyword.IsNullOrWhiteSpace(), x => x.Title.Contains(input.Keyword) )

                 .WhereIf(input.DeviceId.HasValue, x => x.DeviceId == input.DeviceId)
                 .WhereIf(!input.LogType.IsNullOrWhiteSpace(), x => x.LogType == input.LogType)
                 .WhereIf(input.TimeStart.HasValue, x => x.CreationTime >= input.TimeStart)
                 .WhereIf(input.TimeEnd.HasValue, x => x.CreationTime < input.TimeEnd) 
                 .WhereIf(input.Level.HasValue, x => x.Level == input.Level)
                 .WhereIf(input.TenantId.HasValue, x => x.TenantId == input.TenantId)
                ;
            return Task.FromResult(q);
        }
        #endregion

        #region   不保留 排序
        protected override IQueryable<IotDeviceAlarm> ApplySorting(IQueryable<IotDeviceAlarm> query, IotDeviceAlarmPagedRequest input)
        {
            return base.ApplySorting(query, input);
            //return query.OrderByDescending(r => r.Id);
        }
        #endregion

        #region 不保留  手动添加

        #endregion


    }
}